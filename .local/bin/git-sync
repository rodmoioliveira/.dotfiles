#!/usr/bin/env bash

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o noclobber
set -o pipefail
shopt -s inherit_errexit

CMD_NAME="git-sync"
CMD_DESCRIPTION="Pull the changes from the remote default branch into the local default branch."

deps-validate() {
  summary=()
  is_valid=true

  deps=(
    "cat"
    "env"
    "getopt"
    "git"
    "realpath"
    "sed"
  )
  for dep in "${deps[@]}"; do
    if ! command -v "${dep}" &>/dev/null; then
      summary+=("[deps] Fail ${dep}")
      is_valid=false
    else
      summary+=("[deps] OK   ${dep}")
    fi
  done

  if [[ "${is_valid}" == false ]]; then
    printf 1>&2 "You must install all the dependencies for %s work correctly:\n\n" "${CMD_NAME}"
    printf 1>&2 "    %s\n" "${summary[@]}"
    exit 1
  fi
}

usage-short() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage: ${CMD_NAME} [OPTIONS]

Options:
      --path   <PATH>     Use to run as if ${CMD_NAME} was started in <PATH> instead of the current working directory [default: \$(pwd)]
  -h, --help              Print help information (use '--help' for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage-long() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage:
  ${CMD_NAME} [OPTIONS]

Options:
      --path <PATH>
          Use to run as if ${CMD_NAME} was started in <PATH> instead of the
          current working directory
          [default: \$(pwd)]

  -h, --help
          Print help information (see a summary with '-h')

Examples:
  ${CMD_NAME} --path ~/your/repo

  # Synchronize with the latest changes in several repositories:
  find . -maxdepth 1 -type d |
    xargs -P10 -n1 ${CMD_NAME} --path
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

args-parse() {
  local args

  if ! args=$(
    getopt -a \
      -n "${CMD_NAME}" \
      -o h \
      --long help,path: \
      -- "$@"
  ); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "${1}" in
    --path)
      shift
      GIT_PATH="${1}"
      ;;
    -h)
      usage-short
      exit 0
      ;;
    --help)
      usage-long
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *) usage-long ;;
    esac
    shift
  done
}

args-validate() {
  if [[ -z "${GIT_PATH}" ]]; then
    GIT_PATH=$(pwd)
  else
    GIT_PATH=$(realpath "${GIT_PATH}")
  fi

  if [[ ! -d "${GIT_PATH}" ]]; then
    printf 1>&2 "error: invalid value '%s' for '--path <PATH>'\n" "${GIT_PATH}"
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi

  if ! git -P -C "${GIT_PATH}" rev-parse --git-dir >/dev/null; then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 128
  fi
}

git-sync() {
  # https://stackoverflow.com/questions/28666357/how-to-get-default-git-branch/44750379#44750379
  default_branch=$(git -C "${GIT_PATH}" symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

  printf -- "-------\n%s\n" "${GIT_PATH}"
  git -C "${GIT_PATH}" stash --include-untracked
  git -C "${GIT_PATH}" checkout "${default_branch}"
  git -C "${GIT_PATH}" pull
}

main() {
  deps-validate
  args-parse "$@"
  args-validate
  git-sync
}

main "$@"
