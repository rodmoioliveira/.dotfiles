#!/usr/bin/env bash

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o noclobber
set -o pipefail
shopt -s inherit_errexit

CMD_NAME="git-loc"
CMD_DESCRIPTION="Prints the number of lines of code added and deleted per commit."

deps-validate() {
  summary=()
  is_valid=true

  deps=(
    "awk"
    "cat"
    "env"
    "getopt"
    "git"
    "grep"
    "head"
    "paste"
    "realpath"
    "sed"
    "xargs"
  )
  for dep in "${deps[@]}"; do
    if ! command -v "${dep}" &>/dev/null; then
      summary+=("[deps] Fail ${dep}")
      is_valid=false
    else
      summary+=("[deps] OK   ${dep}")
    fi
  done

  if [[ "${is_valid}" == false ]]; then
    printf 1>&2 "You must install all the dependencies for %s to work correctly:\n\n" "${CMD_NAME}"
    printf 1>&2 "    %s\n" "${summary[@]}"
    exit 1
  fi
}

usage-short() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage: ${CMD_NAME} [OPTIONS]

Options:
      --path   <PATH>     Use to run as if ${CMD_NAME} was started in <PATH> instead of the current working directory [default: \$(pwd)]
  -h, --help              Print help information (use '--help' for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage-long() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage:
  ${CMD_NAME} [OPTIONS]

Options:
      --path <PATH>
          Use to run as if ${CMD_NAME} was started in <PATH> instead of the
          current working directory
          [default: \$(pwd)]

  -h, --help
          Print help information (see a summary with '-h')

Examples:
  # Inside a git directory run:
  ${CMD_NAME}

  # Use '--path' to run as if ${CMD_NAME} was started in <PATH> instead
  # of the current working directory.
  ${CMD_NAME} --path ./your/repo

Output:
  ${CMD_NAME} | column -t

  commits           loc-added  loc-deleted
  0c3f5e3..3a787b9  180        0
  8d51b23..0c3f5e3  16         0
  5633537..8d51b23  62         33
  d8df183..5633537  16         0
  3ce044e..d8df183  4          4
  ef78d95..3ce044e  16         0
  abef142..ef78d95  124        23
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

args-parse() {
  local args

  if ! args=$(
    getopt -a \
      -n "${CMD_NAME}" \
      -o h \
      --long help,path: \
      -- "$@"
  ); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "${1}" in
    -h)
      usage-short
      exit 0
      ;;
    --help)
      usage-long
      exit 0
      ;;
    --path)
      shift
      GIT_PATH="${1}"
      ;;
    --)
      shift
      break
      ;;
    *) usage-long ;;
    esac
    shift
  done
}

args-validate() {
  if [[ -z "${GIT_PATH}" ]]; then
    GIT_PATH=$(pwd)
  else
    GIT_PATH=$(realpath "${GIT_PATH}")
  fi

  if [[ ! -d "${GIT_PATH}" ]]; then
    printf 1>&2 "error: invalid value '%s' for '--path <PATH>'\n" "${GIT_PATH}"
    printf 1>&2 "directory %s does not exit!\n" "${GIT_PATH}"
    exit 1
  fi

  if ! git -P -C "${GIT_PATH}" rev-parse --git-dir >/dev/null; then
    printf 1>&2 "error: invalid value '%s' for '--path <PATH>'\n" "${GIT_PATH}"
    printf 1>&2 "directory %s is not a git repository!\n" "${GIT_PATH}"
    exit 128
  fi
}

git-loc() {
  # shellcheck disable=SC2016
  paste \
    <(git -C "${GIT_PATH}" -P log --pretty="%h" | awk 'NR > 1 {print}') \
    <(git -C "${GIT_PATH}" -P log --pretty="%h" | head -n -1) |
    sed -E 's/\t/../g' |
    sed -E "s@(.+)@${GIT_PATH} \1@g" |
    xargs -n2 bash -c '
      git -C $0 -P log --pretty="%h" --numstat $1 |
        grep -E "^$" -v |
        awk -v commits=$1 "NF==3 {plus+=\$1; minus+=\$2} END {print commits,plus,minus}"' |
    sed -E '1icommits loc-added loc-deleted'
}

main() {
  deps-validate
  args-parse "$@"
  args-validate
  git-loc
}

main "$@"
