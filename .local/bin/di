#!/usr/bin/env bash

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o noclobber
set -o pipefail
shopt -s inherit_errexit

CMD_NAME="di"
CMD_DESCRIPTION="Display the interval between two dates."

deps-validate() {
  summary=()
  is_valid=true

  deps=(
    "cat"
    "date"
    "env"
    "getopt"
  )
  for dep in "${deps[@]}"; do
    if ! command -v "${dep}" &>/dev/null; then
      summary+=("[deps] Fail ${dep}")
      is_valid=false
    else
      summary+=("[deps] OK   ${dep}")
    fi
  done

  if [[ "${is_valid}" == false ]]; then
    printf 1>&2 "You must install all the dependencies for %s work correctly:\n\n" "${CMD_NAME}"
    printf 1>&2 "    %s\n" "${summary[@]}"
    exit 1
  fi
}

usage-short() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage: ${CMD_NAME} <DATETIME:OLDER> <DATETIME:NEWER> [OPTIONS]

Options:
  -h, --help              Print help information (use '--help' for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage-long() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage:
  ${CMD_NAME} <DATETIME:OLDER> <DATETIME:NEWER> [OPTIONS]

Options:
  -h, --help
          Print help information (see a summary with '-h')

Examples:
  ${CMD_NAME} 2024-05-10T17:18:52Z 2024-05-17T17:18:52Z

Input:
  2024-05-10T17:18:52Z 2024-05-17T17:18:52Z

Output:
  0 years, 7 days, 0 hours, 0 minutes and 0 seconds
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

args-parse() {
  local args

  if ! args=$(
    getopt -a \
      -n "${CMD_NAME}" \
      -o h,f: \
      --long help \
      -- "$@"
  ); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "${1}" in
    -h)
      usage-short
      exit 0
      ;;
    --help)
      usage-long
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *) usage-long ;;
    esac
    shift
  done
}

di() {
  timestamp=$(("$(date -d "${2}" +%s)" - "$(date -d "${1}" +%s)"))
  duration=$(
    printf \
      '%d years, %d days, %d hours, %d minutes and %d seconds' \
      "$(("${timestamp}" / 60 / 60 / 24 / 365))" \
      "$(("${timestamp}" / 60 / 60 / 24 % 365))" \
      "$(("${timestamp}" / 3600 % 24))" \
      "$(("${timestamp}" % 3600 / 60))" \
      "$(("${timestamp}" % 60))"
  )

  printf "%s\n" "${duration}"
}

main() {
  deps-validate
  args-parse "$@"
  di "$@"
}

main "$@"
