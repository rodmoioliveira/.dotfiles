#!/usr/bin/env bash

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o noclobber
set -o pipefail
shopt -s inherit_errexit

CMD_NAME="git-bump"
CMD_DESCRIPTION="Bump the current tag version to the next version according to the SemVer spec."

declare DRY_RUN=false
declare MESSAGE=''
declare RELEASE_LEVEL=''
declare -r SEMVER_REGEX='^(?P<v>v)?(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'

deps-validate() {
  summary=()
  is_valid=true

  deps=(
    "cat"
    "env"
    "getopt"
    "git"
    "rg"
    "sd"
    "tail"
  )
  for dep in "${deps[@]}"; do
    if ! command -v "${dep}" &>/dev/null; then
      summary+=("[deps] Fail ${dep}")
      is_valid=false
    else
      summary+=("[deps] OK   ${dep}")
    fi
  done

  if [[ "${is_valid}" == false ]]; then
    printf 1>&2 "You must install all the dependencies for %s to work correctly:\n\n" "${CMD_NAME}"
    printf 1>&2 "    %s\n" "${summary[@]}"
    exit 1
  fi
}

usage-short() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage: ${CMD_NAME} [OPTIONS] --level <RELEASE_LEVEL>

Arguments:
  -l, --level    <RELEASE_LEVEL>  The release level to bump tag [possible values: patch, minor, major]

Options:
  -m, --message  <MESSAGE>        Optional tag message
  -d, --dry-run                   Prints the next version without committing anything
  -h, --help                      Print help information (use '--help' for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage-long() {
  local help_text

  help_text=$(
    cat <<EOF
${CMD_DESCRIPTION}

Usage:
  ${CMD_NAME} [OPTIONS] --level <RELEASE_LEVEL>

Arguments:
  -l, --level <RELEASE_LEVEL>
          The release level to bump tag [possible values: patch, minor, major]

Options:
  -m, --message <MESSAGE>
          Optional tag message

  -d, --dry-run
          Prints the next version without committing anything

  -h, --help
          Print help information (use '-h' for a summary)

Examples:
  ${CMD_NAME} -l patch -m "version %T"
  ${CMD_NAME} -l minor -d
  ${CMD_NAME} -l major
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

args-parse() {
  local args

  if ! args=$(
    getopt -a \
      -n "${CMD_NAME}" \
      -o hdl:m: \
      --long dry-run,help,level:,message: \
      -- "$@"
  ); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h)
      usage-short
      exit 0
      ;;
    --help)
      usage-long
      exit 0
      ;;
    -l | --level)
      shift
      RELEASE_LEVEL="$1"
      ;;
    -m | --message)
      shift
      MESSAGE="$1"
      ;;
    -d | --dry-run)
      DRY_RUN=true
      ;;
    --)
      shift
      break
      ;;
    *) usage-long ;;
    esac
    shift
  done
}

error-release() {
  printf 1>&2 "'%s' isn't a valid value for '--level <RELEASE_LEVEL>'\n" "${RELEASE_LEVEL}"
  printf 1>&2 "  [possible values: patch, minor, major]\n\n"
  printf 1>&2 "For more information try '--help'\n"
  exit 1
}

error-not-git-dir() {
  printf 1>&2 "%s is not a git repository\n" "$(pwd)"
  exit 1
}

error-no-semver() {
  printf 1>&2 "%s repo doesn't have any tag\n\n" "$(pwd)"
  printf 1>&2 "You can create one like this:\n"
  printf 1>&2 "git tag -a 0.1.0 -m \"version 0.1.0\"\n"
  exit 1
}

error-prerelease-buildmetadata() {
  printf 1>&2 "bump fail because tag '%s' has additional info.\n\n" "${CURRENT_VERSION}"
  printf 1>&2 "      prerelease: '%s'\n" "${prerelease}"
  printf 1>&2 "   buildmetadata: '%s'\n" "${buildmetadata}"
  exit 1
}

error-invalid-semver() {
  printf 1>&2 "last version '%s' isn't a valid semantic version tag.\n" "${CURRENT_VERSION}"
  printf 1>&2 "For more info, visit https://semver.org/\n\n"
  printf 1>&2 "You can rename the tag with:\n"
  printf 1>&2 "git tag new old\n"
  printf 1>&2 "git tag -d old\n"
  exit 1
}

args-validate() {
  if [[ -z "${RELEASE_LEVEL}" && -z "${MESSAGE}" && "${DRY_RUN}" == false ]]; then
    usage-long
    exit 0
  fi

  if [[ -z "${RELEASE_LEVEL}" ]]; then
    error-release
  fi
}

git-dir-check() {
  local -r is_git_dir=$(git rev-parse --git-dir 2>/dev/null)

  if [[ -n "${is_git_dir}" ]]; then
    CURRENT_VERSION=$(git -P tag --sort=taggerdate --format '%(tag)' | tail -n1)
  else
    error-not-git-dir
  fi
}

semver-get() {
  if [[ -z "${CURRENT_VERSION}" ]]; then
    error-no-semver
  fi
}

release-check() {
  case "${RELEASE_LEVEL}" in
  "patch") ;;
  "minor") ;;
  "major") ;;
  *) error-release ;;
  esac
}

semver-validate() {
  if ! printf "%s" "${CURRENT_VERSION}" | rg "${SEMVER_REGEX}" >/dev/null; then
    error-invalid-semver
  fi
}

semver-parse() {
  # shellcheck disable=SC2016
  v=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${v}')
  # shellcheck disable=SC2016
  major=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${major}')
  # shellcheck disable=SC2016
  minor=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${minor}')
  # shellcheck disable=SC2016
  patch=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${patch}')
  # shellcheck disable=SC2016
  prerelease=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${prerelease}')
  # shellcheck disable=SC2016
  buildmetadata=$(printf "%s" "${CURRENT_VERSION}" | sd "${SEMVER_REGEX}" '${buildmetadata}')

  if [[ -n "${prerelease}" || -n "${buildmetadata}" ]]; then
    error-prerelease-buildmetadata
  fi
}

semver-bump() {
  case "${RELEASE_LEVEL}" in
  "patch")
    patch=$((patch + 1))
    ;;
  "minor")
    minor=$((minor + 1))
    patch=0
    ;;
  "major")
    major=$((major + 1))
    minor=0
    patch=0
    ;;
  *) error-release ;;
  esac

  readonly NEXT_VERSION="${v}${major}.${minor}.${patch}"
}

semver-next() {
  if ${DRY_RUN}; then
    printf 1>&2 "Current version is %s\n" "${CURRENT_VERSION}"
    printf 1>&2 "Semantic version will be bumped to %s\n" "${NEXT_VERSION}"
    printf "%s\n" "${NEXT_VERSION}"
    exit 0
  fi

  if [[ -z "${MESSAGE}" ]]; then
    git tag -a "${NEXT_VERSION}" -m "version ${NEXT_VERSION}" && confirm
  else
    str="${MESSAGE}"
    substr="%T"

    if [[ "${str}" == *"${substr}"* ]]; then
      message_template=$(printf "%s" "${MESSAGE}" | sd '%T' "%s")
      # shellcheck disable=SC2059
      git tag -a "${NEXT_VERSION}" -m "$(printf "${message_template}" "${NEXT_VERSION}")" && confirm
    else
      git tag -a "${NEXT_VERSION}" -m "${MESSAGE}" && confirm
    fi
  fi
}

confirm() {
  printf 1>&2 "Last version was %s\n" "${CURRENT_VERSION}"
  printf 1>&2 "Current version now is %s\n" "${NEXT_VERSION}"
  printf "%s\n" "${NEXT_VERSION}"
  exit 0
}

main() {
  args-parse "$@"
  args-validate
  release-check
  git-dir-check
  semver-get
  semver-validate
  semver-parse
  semver-bump
  semver-next
}

main "$@"
